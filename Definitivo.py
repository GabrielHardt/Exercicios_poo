#encapsulamento, polimorfismo e interfaces e classes abstratas

# ExercÃ­cio: Sistema de Pagamento
# VocÃª foi contratado para desenvolver um sistema de pagamento de uma loja. Esse sistema deve ser capaz de lidar com diferentes formas de pagamento (cartÃ£o de crÃ©dito, boleto e pix).

# Implemente uma estrutura de classes que siga os conceitos abaixo:

# ğŸ“Œ Regras:
# Interface (Classe Abstrata):

# Crie uma classe abstrata Pagamento com o mÃ©todo abstrato pagar(self, valor).

# Encapsulamento:

# Cada classe de pagamento (CartaoCredito, Boleto, Pix) deve ter um atributo privado chamado saldo.

# Crie um mÃ©todo get_saldo() para acessar o saldo.

# Polimorfismo:

# Cada classe concreta (CartaoCredito, Boleto, Pix) deve implementar o mÃ©todo pagar, de forma diferente.

# FaÃ§a um pequeno menu de simulaÃ§Ã£o onde o usuÃ¡rio escolha a forma de pagamento e o valor da compra.

# Pontos trabalhados:
# âœ… Encapsulamento: saldo privado (__saldo)
# âœ… Polimorfismo: mÃ©todo pagar() Ã© implementado de forma diferente nas 3 classes
# âœ… Classe Abstrata / Interface: Pagamento define o mÃ©todo abstrato pagar()


from abc import ABC, abstractmethod

class Pagamento(ABC): #Impedir a criaÃ§Ã£o de objetos da classe abstrata: NinguÃ©m pode fazer pagamento = Pagamento(). Ela Ã© sÃ³ um molde.
    @abstractmethod # Ele serve para marcar um mÃ©todo que todas as classes filhas sÃ£o obrigadas a implementar. Neste caso, pagar
    def pagar(self, valor):    # quando se colocar o @abstractMethod , basicamente se esta falando "Toda classe que herdar de Pagamento vai ser obrigada a criar o mÃ©todo pagar() do jeito dela."
        pass

class CartaoCredito(Pagamento):
    def __init__(self, valor, saldo):
        super().__init__(valor)
        self.__saldo = saldo           #saldo esta encapsulado
    
    def get_saldo(self):
        return f"Seu saldo Atual e de: {self.__saldo}"    # para saber quanto de saldo possuimos, teremos que chamar este metodo
    
# Se um dado Ã© privado da classe filha, ele deve ser acessado sÃ³ pelos mÃ©todos da filha.

    def pagar(self, valor):
        if self.__saldo >= valor:
            self.__saldo -= valor
            return f"Compra aprovada aprovada no valor de R${valor}"
        else:
            return f"Saldo insuficiente para compra"

class Boleto(Pagamento):
    def __init__(self, valor, saldo):
        super().__init__(valor)
        self.__saldo = saldo           
    
    def get_saldo(self):
        return f"Seu saldo Atual e de: {self.__saldo}"    
    
    def pagar(self, valor):
        return f"Boleto gerado no valor de R${valor}"
    
class Pix(Pagamento):
    def __init__(self, valor, saldo):
        super().__init__(valor)
        self.__saldo = saldo          
    
    def get_saldo(self):
        return f"Seu saldo Atual e de: {self.__saldo}"    
    
    def pagar(self, valor):
        if self.__saldo >= valor:
            self.__saldo -= valor  # Aqui desconta o saldo
            return f"Pix realizado no valor de R${valor}"
        else:
            return f"Saldo insuficiente para Pix"
        

# ğŸ“Œ ConfirmaÃ§Ã£o ponto a ponto:
# âœ… Encapsulamento â†’ EstÃ¡ presente no __saldo

# O __saldo Ã© privado

# SÃ³ pode ser acessado/modificado pelos mÃ©todos da prÃ³pria classe (get_saldo(), pagar())

# Protege o dado de alteraÃ§Ãµes externas e acidentais

# âœ… Interface â†’ Representada pela classe abstrata Pagamento

# Ela obriga qualquer classe filha a implementar o mÃ©todo pagar()

# Ã‰ o famoso "contrato": "se vocÃª Ã© um Pagamento, vocÃª precisa saber pagar"

# âœ… Polimorfismo â†’ Acontece quando vocÃª tem vÃ¡rias classes diferentes (CartaoCredito, Pix, Boleto)

# Todas possuem o mÃ©todo pagar()

# Mas cada uma faz do seu jeito

# Quando vocÃª chama pagar() em uma lista de objetos Pagamento, o Python executa o mÃ©todo correto dependendo da classe real daquele objeto

